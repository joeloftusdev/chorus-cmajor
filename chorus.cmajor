graph Chorus [[ main ]]
{
    input value bool bypass [[ name: "Bypass", boolean ]];

    input stream float in;
    output stream float<2> out;
   
    input value float rate  [[ name: "Rate", min: 0.01,  max: 20.0,   init: 0.5]];
    input value float depth [[ name: "Depth", min: 0.0,   max: 20.0,  init: 0.5]];
    input value float shape [[ name: "Shape", min: 0.0,   max: 1.0,    init: 0.0 ]];

    node mix = std::mixers::Interpolator(float<2>, 80.0f);
    node chorus1 = ChorusProcessor (0.0f, -1.0f);
    node chorus2 = ChorusProcessor (0.5f,  1.0f);
  
    connection
    {
        
    rate  -> chorus1.rate, chorus2.rate;
    depth -> chorus1.depth, chorus2.depth;
    shape -> chorus1.shape, chorus2.shape;
    float<2>(in, in) -> mix.in1;
    in -> chorus1.in, chorus2.in;
    chorus1.out, chorus2.out -> mix.in2;
    bypass ? 0.0f : 100.0f -> mix.mix;
    mix.out -> out; 
    
    }
}

graph ChorusProcessor (float initialPhase, float pan)
{
    input value float rate;
    input value float depth;
    input value float shape;
    
    input stream float in;
    output stream float<2> out;

    node   osc = Oscillator(initialPhase);
    node   panner = StereoPan(pan);
    node   delay  = Delay;

    connection
    {        
    rate  -> osc.rate;
    depth -> osc.depth;
    shape -> osc.shape;
    in -> delay.in;
    osc.out -> delay.modIn;
    delay.out -> panner.in;
    panner.out -> out;
    }
}

processor Oscillator (float initialPhase)
{
    input stream float rate;
    input stream float depth;
    input stream float shape;

    output stream float out;

    void main()
    {
        float phase = initialPhase;

        loop
        {
          let value = (shape < 0.5f) ? std::oscillators::waveshape::sine(phase * 2.0f) : 2.0f * (std::oscillators::waveshape::triangle(phase) - 0.5f);
            out <- depth * 0.01f * value;
            phase = fmod (phase + rate * float (processor.period), 1.0f);
            advance();
        }
    }
}

processor StereoPan (float pan)
{
    input stream float in;
    output stream float<2> out;

    void main()
    {
        let l = (1 - pan) / 2.0f;
        let r = 1.0f - l;

        loop
        {
            out <- float<2> (l * in, r * in);
            advance();
        }
    }
}

processor Delay 
{
   
    input stream float in, modIn;
    output stream float out;

    const float delayTime = 1.0;
    float[48] buf;

    void main()
    {
        let samplesPerMs = float (processor.frequency / 1000.0);
        wrap<buf.size> writePos;

        loop
        {
            let delayMs = delayTime * samplesPerMs * (1.0f + modIn) + 1.0f;
            let delayedVal = readLinearInterpolated (buf, float(writePos) - delayMs);
            buf[writePos] = in;

            out <- delayedVal;
            writePos++;
            advance();
        }
    }
}


